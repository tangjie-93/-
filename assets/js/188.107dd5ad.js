(window.webpackJsonp=window.webpackJsonp||[]).push([[188],{852:function(t,e,s){"use strict";s.r(e);var a=s(69),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"rpc简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rpc简介"}},[t._v("#")]),t._v(" rpc简介")]),t._v(" "),s("p",[t._v("所谓 "),s("code",[t._v("RPC")]),t._v(" ("),s("code",[t._v("remote procedure call")]),t._v(" 远程过程调用)。\n它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。在 "),s("code",[t._v("OSI")]),t._v(" 网络通信模型中，"),s("code",[t._v("RPC")]),t._v(" 跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。")]),t._v(" "),s("p",[t._v("该框架实际是提供了一套机制，使得应用程序之间可以进行通信，而且也遵从"),s("code",[t._v("server/client")]),t._v(" 模型。使用的时候客户端调用 "),s("code",[t._v("server")]),t._v(" 端提供的接口就像是调用本地的函数一样。")]),t._v(" "),s("h2",{attrs:{id:"grpc简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#grpc简介"}},[t._v("#")]),t._v(" grpc简介")]),t._v(" "),s("p",[s("code",[t._v("grpc")]),t._v(" 一开始由 "),s("code",[t._v("Google")]),t._v(" 开发，是一款语言中立、平台中立、开源的远程过程调用("),s("code",[t._v("RPC")]),t._v(")系统。")]),t._v(" "),s("h2",{attrs:{id:"grpc的优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#grpc的优势"}},[t._v("#")]),t._v(" grpc的优势")]),t._v(" "),s("p",[s("code",[t._v("gRPC")]),t._v(" 和 "),s("code",[t._v("Restful API")]),t._v(" 而且它们都使用 "),s("code",[t._v("http")]),t._v(" 作为底层的传输协议(严格地说, "),s("code",[t._v("gRPC")]),t._v(" 使用的 "),s("code",[t._v("http2.0")]),t._v(" ，而 "),s("code",[t._v("restful api")]),t._v("则不一定。")]),t._v(" "),s("ul",[s("li",[t._v("语言中立，支持多种语言")]),t._v(" "),s("li",[t._v("通信协议基于标准的 "),s("code",[t._v("HTTP/2")]),t._v(" 设计，支持双向流、消息头压缩、单 "),s("code",[t._v("TCP")]),t._v(" 的多路复用、服务端推送等特性，这些特性使得 "),s("code",[t._v("gRPC")]),t._v(" 在移动端设备上更加省电和节省网络流量;")]),t._v(" "),s("li",[s("code",[t._v("gRPC")]),t._v(" 可以通过 "),s("code",[t._v("protobuf")]),t._v(" 来定义接口，从而可以有更加严格的接口约束条件。")]),t._v(" "),s("li",[s("code",[t._v("protobuf")]),t._v(" 可以将数据序列化为二进制编码，这会大幅减少需要传输的数据量，从而大幅提高性能。")]),t._v(" "),s("li",[t._v("序列化支持 "),s("code",[t._v("PB（Protocol Buffer）")]),t._v("和 "),s("code",[t._v("JSON")]),t._v("，"),s("code",[t._v("PB")]),t._v(" 是一种语言无关的高性能序列化框架，基于 "),s("code",[t._v("HTTP/2 + PB")]),t._v(", 保障了 "),s("code",[t._v("RPC")]),t._v(" 调用的高性能。")]),t._v(" "),s("li",[s("code",[t._v("gRPC")]),t._v(" 可以方便地支持流式通信(理论上通过"),s("code",[t._v("http2.0")]),t._v("就可以使用"),s("code",[t._v("streaming")]),t._v(" 模式, 但是通常 "),s("code",[t._v("web")]),t._v(" 服务的 "),s("code",[t._v("restful api")]),t._v(" 似乎很少这么用，通常的流式数据应用如视频流，一般都会使用专门的协议如 "),s("code",[t._v("HLS，RTMP")]),t._v(" 等，这些就不是我们通常 "),s("code",[t._v("web")]),t._v(" 服务了，而是有专门的服务器应用。）")])]),t._v(" "),s("h2",{attrs:{id:"grpc的不足"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#grpc的不足"}},[t._v("#")]),t._v(" grpc的不足")]),t._v(" "),s("ul",[s("li",[t._v("在生产环境，我们面对大并发的情况下，需要使用分布式系统来去处理，而gRPC并没有提供分布式系统相关的一些必要组件。而且，真正的线上服务还需要提供包括负载均衡，限流熔断，监控报警，服务注册和发现等等必要的组件。")]),t._v(" "),s("li",[s("code",[t._v("GRPC")]),t._v(" 尚未提供连接池，需要自行实现")]),t._v(" "),s("li",[t._v("尚未提供“服务发现”、“负载均衡”机制")]),t._v(" "),s("li",[t._v("因为基于 "),s("code",[t._v("HTTP2")]),t._v("，绝大部多数"),s("code",[t._v("HTTP Server、Nginx")]),t._v("都尚不支持，即Nginx不能将GRPC请求作为"),s("code",[t._v("HTTP")]),t._v(" 请求来负载均衡，而是作为普通的 "),s("code",[t._v("TCP")]),t._v(" 请求。")]),t._v(" "),s("li",[t._v("Protobuf二进制可读性差。")])]),t._v(" "),s("h2",{attrs:{id:"grpc可以定义4种类型的-service-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#grpc可以定义4种类型的-service-方法"}},[t._v("#")]),t._v(" grpc可以定义4种类型的 "),s("code",[t._v("service")]),t._v(" 方法")]),t._v(" "),s("ul",[s("li",[t._v("简单的 "),s("code",[t._v("RPC")]),t._v(", 客户端使用存根发送请求到服务器并等待响应返回，就像平常的函数调用一样。")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("rpc "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetFeature")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Point"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("returns")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("Feature")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ul",[s("li",[t._v("一个服务器端流式 "),s("code",[t._v("RPC")]),t._v(" ， 客户端发送请求到服务器，拿到一个流去读取返回的消息序列。 客户端读取返回的流，直到里面没有任何消息。")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v(" rpc "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ListFeatures")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Rectangle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("returns")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("stream Feature")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ul",[s("li",[t._v("一个 客户端流式 "),s("code",[t._v("RPC")]),t._v(" ， 客户端写入一个消息序列并将其发送到服务器，同样也是使用流。一旦客户端完成写入消息，它等待服务器完成读取返回它的响应。")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("rpc "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("RecordRoute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stream Point"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("returns")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("RouteSummary")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ul",[s("li",[t._v("一个 双向流式 RPC 是双方使用读写流去发送一个消息序列。")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("rpc "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("RouteChat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stream RouteNote"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("returns")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("stream RouteNote")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h1",{attrs:{id:"protobuf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#protobuf"}},[t._v("#")]),t._v(" Protobuf")]),t._v(" "),s("h2",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),s("p",[s("code",[t._v("Protobuf(Google Protocol Buffer)")]),t._v(" 是一种轻便高效的结构化数据存储格式,与 "),s("code",[t._v("XML、JSON")]),t._v(" 类似，在一些高性能且对响应速度有要求的数据传输场景非常适用。。与"),s("strong",[t._v("平台无关、语言无关、可扩展")]),t._v("，可用于通讯协议和数据存储领域。")]),t._v(" "),s("p",[s("strong",[t._v("优点")])]),t._v(" "),s("ul",[s("li",[t._v("与平台无关，语言无关，可扩展。")]),t._v(" "),s("li",[t._v("提供了友好的动态库，使用简单")]),t._v(" "),s("li",[t._v("解析速度快，比对应的XML快约20—100倍。")]),t._v(" "),s("li",[t._v("序列化数据非常简洁、紧凑。与xml相比，其序列化之后的数据量约为1/3到1/10。")]),t._v(" "),s("li",[t._v("前后端都可以直接在项目中使用protobuf，不用再额外去定义model。")]),t._v(" "),s("li",[t._v("protobuf可以直接作为前后端数据和接口的文档，大大减少了沟通成本。")])]),t._v(" "),s("h3",{attrs:{id:"protoco-buffers在grpc的框架中主要有三个作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#protoco-buffers在grpc的框架中主要有三个作用"}},[t._v("#")]),t._v(" Protoco Buffers在gRPC的框架中主要有三个作用")]),t._v(" "),s("ul",[s("li",[t._v("定义数据结构")]),t._v(" "),s("li",[t._v("定义服务接口")])]),t._v(" "),s("h3",{attrs:{id:"protobuf在客户端上运行需要安装的两个程序。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#protobuf在客户端上运行需要安装的两个程序。"}},[t._v("#")]),t._v(" protobuf在客户端上运行需要安装的两个程序。")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/protocolbuffers/protobuf/releases",target:"_blank",rel:"noopener noreferrer"}},[t._v("protoc编译工具"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/grpc/grpc-web/releases",target:"_blank",rel:"noopener noreferrer"}},[t._v("protoc-gen-grpc-web"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("这两个程序会将后台定义的"),s("code",[t._v("proto")]),t._v("文件编译成前端可以直接用的"),s("code",[t._v("js")]),t._v("脚本。")]),t._v(" "),s("p",[s("strong",[t._v("注意：")]),t._v(" 这两个程序下载后要把他们的存放路径添加到系统环境变量中去，同时要记得将他们的版本号都去掉。以便在项目中直接使用。")]),t._v(" "),s("p",[t._v("可以将"),s("code",[t._v("proto")]),t._v("文件编译成"),s("code",[t._v("js")]),t._v("的脚本直接放到"),s("code",[t._v("package.json")]),t._v("的"),s("code",[t._v("scripts")]),t._v("字段中。如"),s("code",[t._v("protoc -I=device -I=/device/service devicw.proto --js_out=import_style=commonjs:device/client --grpc-web_out=import_style=commonjs,mode=grpcwebtext:device/client")])]),t._v(" "),s("ul",[s("li",[t._v("其中"),s("code",[t._v("-I")]),t._v("表示的是"),s("code",[t._v("proto")]),t._v("文件的存放目录。")]),t._v(" "),s("li",[s("code",[t._v("--js_out=import_style=commonjs:device/client")]),t._v("表示编译后的"),s("code",[t._v("js")]),t._v("的引用格式是"),s("code",[t._v("commonjs")]),t._v(",输出后的文件存放在"),s("code",[t._v("device/client")]),t._v("文件夹内。输入文件为"),s("code",[t._v("device.proto")]),t._v("输出文件为"),s("code",[t._v("device_pb.js")]),t._v("，这里面存放的是一些接口。在组件中的引入方式如下：")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  DevicePageQuery"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  Device"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  QueryDeviceBySnRequest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  DeviceType"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  DeleteDeviceRequest\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../grpc-web-protobuf/device/client/Device_pb'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这些接口名称在device.proto文件中都能找到。")]),t._v("\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("ul",[s("li",[t._v("--grpc-web_out=import_style=commonjs,mode=grpcwebtext:device/client"),s("code",[t._v("。表示编译后的")]),t._v("js"),s("code",[t._v("的引用格式是")]),t._v("commonjs"),s("code",[t._v(",输出后的文件存放在")]),t._v("device/client"),s("code",[t._v("文件夹内。输入文件为")]),t._v("device.proto"),s("code",[t._v("输出文件为")]),t._v("Device_grpc_web_pb.js`，这里面存放的是连接服务器的。在组件中的引入方式如下：")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  DeviceServerClient\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../grpc-web-protobuf/device/client/Device_grpc_web_pb'")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("具体项目可以参考我最近做的一个项目。"),s("a",{attrs:{href:"https://github.com/tangjie-93/vue/web-protobuf-grpc",target:"_blank",rel:"noopener noreferrer"}},[t._v("项目地址为"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("参考文档")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("https://www.jianshu.com/p/9e57da13b737")])]),t._v(" "),s("li",[s("p",[t._v("https://baijiahao.baidu.com/s?id=1633335936037018920&wfr=spider&for=pc")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);